// src/commands/login.command.ts
import { BaseCommand, CommandOptions } from './base.command';
import enquirer from 'enquirer';
import { AuthenticationService } from '../services/authentication.service';
import { APIServer } from '../server/api.server';
import chalk from 'chalk';

export class LoginCommand extends BaseCommand {
  get name(): string { return 'login'; }
  get description(): string { return 'Autentica sua conta Pixel'; }
  get usage(): string { return 'login [--token <token>] [--code <code>]'; }

  async execute(args: string[], options: CommandOptions): Promise<void> {
    this.ui.updateStatusBar({ status: 'üîê' });

    console.log('');
    console.log(chalk.bold.white('üîê Autentica√ß√£o Pixel CLI'));
    console.log(chalk.gray('‚îÄ'.repeat(40)));
    console.log('');

    if (options.token) {
      await this.loginWithToken(options.token);
    } else if (options.code) {
      await this.loginWithCode(options.code);
    } else {
      await this.authenticationFlow();
    }
  }

  private async authenticationFlow(): Promise<void> {
    try {
      // Iniciar servidor local se n√£o estiver rodando
      const server = new APIServer({ port: 3000 });

      console.log(chalk.blue('‚ÑπÔ∏è  Iniciando servidor local para autentica√ß√£o...'));
      await server.start();

      // Gerar sess√£o de autentica√ß√£o
      const authService = AuthenticationService.getInstance();
      const session = authService.generateAuthSession(3000);

      // Mostrar informa√ß√µes da autentica√ß√£o
      console.log('');
      console.log(chalk.green('üåê Acesse a URL abaixo no seu navegador:'));
      console.log(chalk.cyan.underline(session.url));
      console.log('');
      console.log(chalk.yellow('üìã Ou use este c√≥digo:'));
      console.log(chalk.bold.white(session.code));
      console.log('');
      console.log(chalk.gray('‚è∞ Este c√≥digo expira em 5 minutos'));
      console.log(chalk.gray('‚å®Ô∏è  Pressione Ctrl+C para cancelar'));
      console.log('');

      // Aguardar verifica√ß√£o
      console.log(chalk.blue('‚è≥ Aguardando autentica√ß√£o...'));

      const verified = await authService.waitForVerification(session.code, 300000);

      if (verified) {
        const sessionData = authService.getSession(session.code);
        this.ui.showSuccess('‚úÖ Autentica√ß√£o realizada com sucesso!');
        this.ui.updateStatusBar({
          user: sessionData?.userId || 'usuario@pixel.com',
          status: '‚úÖ'
        });

        // Limpar sess√£o
        authService.removeSession(session.code);
      } else {
        this.ui.showError('‚ùå Tempo limite excedido ou autentica√ß√£o cancelada.');
      }

      // Parar servidor
      console.log(chalk.dim('Parando servidor local...'));
      await server.stop();

    } catch (error) {
      console.error(chalk.red('Erro durante autentica√ß√£o:'), error);
      this.ui.showError('Erro ao iniciar processo de autentica√ß√£o.');
    }
  }

  private async loginWithToken(token: string): Promise<void> {
    console.log(chalk.blue('‚è≥ Validando token...'));

    // Simular valida√ß√£o do token
    await new Promise(resolve => setTimeout(resolve, 1500));

    if (this.isValidToken(token)) {
      this.ui.showSuccess('‚úÖ Token v√°lido! Login realizado com sucesso.');
      this.ui.updateStatusBar({ user: 'usuario@pixel.com', status: '‚úÖ' });
    } else {
      this.ui.showError('‚ùå Token inv√°lido. Tente novamente.');
    }
  }

  private async loginWithCode(code: string): Promise<void> {
    console.log(chalk.blue('‚è≥ Verificando c√≥digo...'));

    const authService = AuthenticationService.getInstance();
    const isValid = authService.verifyCode(code, 'usuario@pixel.com');

    if (isValid) {
      this.ui.showSuccess('‚úÖ C√≥digo v√°lido! Login realizado com sucesso.');
      this.ui.updateStatusBar({ user: 'usuario@pixel.com', status: '‚úÖ' });
      authService.removeSession(code);
    } else {
      this.ui.showError('‚ùå C√≥digo inv√°lido ou expirado.');
    }
  }

  private isValidToken(token: string): boolean {
    // Simular valida√ß√£o de token
    return token.length >= 10;
  }
}